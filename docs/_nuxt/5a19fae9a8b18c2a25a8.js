(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{143:function(n,e){n.exports="#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nuniform float time;\nuniform vec2  resolution;\n// uniform vec3  color;\n\n\nuniform sampler2D tAudioData;\nuniform int   isColorInverted;\nuniform int   isGlitched;\nuniform float glitch;\nuniform float zoom;\nconst float c1 = 0.8;\nconst float c2 = 0.11;\nconst float c3 = 0.49;\nconst float speed = 1.5;\nconst vec2 offsetCenter = vec2(-0.5, -0.0);\nconst float offsetZoom = 0.9;\nconst float lineWidth = 0.8;\nconst float senseAudio = 0.2;\n\nconst vec3 bg    = vec3(0.00, 0.00, 0.00);\n\n\nconst float PI = 3.14159265;\nconst float period = 4.;\n\n// const color = vec3(0.01, 0.01, 1.0);\nconst vec3 color = vec3(1.0, 1.0, 1.0);\n\n// const vec3 bg = vec3(0.0, 0.0, 0.0);\n\nmat2 rot(float t){\n  return mat2(cos(t),-sin(t),sin(t),cos(t));\n}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise(float s, float o, float period){\n  float i = floor(s);\n  float f = fract(s);\n  float u = f * f * (3. - 2. * f);\n\n  float s1 = rand(vec2(i/100.,i*o/100.));\n  float s2;\n  if(s < period-1.){\n     s2 = rand(vec2((i+1.)/100.,(i+1.)*o/100.));\n  }else{\n     s2 = rand(vec2(0.,0.));\n  }\n\n  return mix(s1, s2, u);\n}\n\nfloat line(vec2 p, float width){\n  return (1.0 - step(width*0.5, abs(p.y)));\n  // return 0.1 / pow(length(p.y), 0.5);\n}\n\nfloat line_orb(vec2 p, float w){\n    // return (1.0 - step(w, abs(p.y)));\n    return (1.0 - smoothstep(0.0, w, abs(p.y)));\n    // return smoothstep(w, -w, abs(p.y));\n}\n\nvec3 orb(){\n  vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\n  vec3 draw_orb = vec3(0.0);\n\n  float period = 5.0;\n  float t_orb = mod((time+5.2) * speed, period);\n\n  if(isGlitched == 1){\n    for(int i=0; i<5; i++){\n      float r1 = rand(vec2(t_orb+0.0, float(i)))*2.-1.;\n      float r2 = rand(vec2(t_orb+0.1, float(i)))*2.-1.;\n      float intensity = rand(vec2(t_orb+0.2, float(i)))*glitch/255.;\n      if(min(r1, r2)<p.y && p.y<max(r1, r2)){\n        p.x += intensity;\n      }\n    }\n  }\n\n  p += vec2(1.0, 1.0);\n  p *= (zoom + offsetZoom);\n\n  float f = texture2D(tAudioData, p/256.0).r;\n  f = lineWidth - f*senseAudio;\n  \n  for (int i=0; i<3; i++) {\n    float b = (t_orb + float(i) * period / 3.0) * PI * 0.4;\n    float s = sin(b);\n    float ss = s * 1.0 - 0.5;\n\n    vec2 pos = vec2(p.x*cos(b+1.0)/2.0, p.y*(sin(b+1.0)/2.0));\n    pos *= rot(ss * length(p-vec2(s, cos(b))));\n    pos *= rot(0.5 * PI);\n\n    vec3 color;\n    if (i == 0) {\n    \tcolor = vec3(c1, c2, c3);\n    } else if (i==1) {\n    \tcolor = vec3(c2, c3, c1);\n    } else {\n    \tcolor = vec3(c3, c1, c2);\n    }\n    draw_orb += line_orb(pos, f) * color;\n  }\n  \n  // if(isColorInverted != 0){\n  draw_orb = 1.0 - draw_orb;\n  // }\n  return draw_orb;\n}\n\nfloat circle(vec2 p, vec2 center, float size){\n\treturn smoothstep(size+0.01, size, length(p-center));\n}\n\nfloat line_logo(vec2 p){\n\tfloat c = 2.5;\n\tfloat d = 0.13;\n\treturn circle(p, vec2(0., -(c-d)), c) * circle(p, vec2(0., c-d), c);\n}\n\nvec3 logo(){\n  vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\n  // float t = mod(time, period);\n  float t = 0.15;\n\n\tvec3 draw = bg;\n\t\n\tmat2 b = rot(0.15 * PI * 0.5 - 3. * length(vec2(pow(p.x, 2.), pow(p.y, 2.))));\n\t\n\t// float f = texture2D(iChannel0, p).r;\n\t// float f = textureLod( iChannel0, (p)/256.0, 0.0 ).x;\n\t\n\t// vec2 pos = p * rot(f * PI) * b;\n\tvec2 pos = p * rot(1.3 * PI) * b;\n\t\n\tdraw += line_logo(pos) * (color-bg);\n\n  /*\n  vec3 draw = vec3(0.);\n\n  float lines = 0.0;\n\n  p = vec2(p.x*0.75, (p.y*(0.5+pow(p.y, 1.5)))*0.8);\n  p *= 0.5;\n\n  float x = 0.3*noise(t, 0.0, period);\n  float y = 0.3*noise(t, 0.1, period);\n\n  mat2 b = rot(t*PI*0.5-3.0*pow(length(vec2(pow(p.x+x,2.0),pow(p.y+y,2.0))), 1.0));\n\n  float c = sin(t*PI*0.25);\n\n  int i = 0;\n  float extent = 0.15*c*pow(float(i),1.0);\n  // lines += line(vec2(p.x, p.y) * rot((0.5-extent)*PI*0.5)*b, 0.05) / float(i+1);\n  lines += line(vec2(p.x, p.y) * rot((0.5-extent)*PI*0.5)*b, 0.1) / float(i+1);\n\n  draw += lines * color;\n  // draw.r = min(draw.r, 0.5);\n  // draw.g = min(draw.g, 0.5);\n  */\n\n  return draw;\n}\n\nvoid main(void){\n  vec3 orb = orb();\n  vec3 logo = logo();\n\n  float alpha = 1.;\n  if ( logo == vec3(0.) ) {\n    orb = vec3(0.);\n    /*\n    alpha = 0.;\n    */\n  }\n\n  gl_FragColor = vec4(orb, alpha);\n}\n"},148:function(n,e,t){"use strict";t.r(e);var o=t(137),i=(t(139),t(140),{mounted:function(){this.scene=new o.Scene,this.init("canvas")},methods:{init:function(n){this.width=1075,this.height=650,this.aspect=this.width/this.height;var e=document.getElementById(n);e.width=this.width,e.height=this.height,this.renderer=new o.WebGLRenderer({canvas:e,antialias:!0,width:this.width,height:this.height}),this.createCamera(),this.createControls(),this.scene.background=new o.Color(15790320),this.createPlane(t(143),2,2,1),this.animate()},createCamera:function(){this.camera=new o.PerspectiveCamera(45,this.aspect,1,1e4),this.camera.position.set(0,0,2.42)},createControls:function(){var n=new o.OrbitControls(this.camera);n.target.set(0,0,0),n.update()},createPlane:function(n,e,t,i){var r={resolution:{type:"v2",value:new o.Vector2(this.width,this.height)},time:{type:"f",value:1.1},zoom:{type:"f",value:.5}},a=new o.ShaderMaterial({vertexShader:"\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",fragmentShader:n,uniforms:r}),s=new o.PlaneGeometry(e,t),c=new o.Mesh(s,a);c.position.set(0,0,i),this.scene.add(c)},_createTextMesh:function(n,e){var t=new o.MeshBasicMaterial({color:26265,transparent:!0,opacity:1,side:o.DoubleSide}),i=n.generateShapes(e.message,e.size),r=new o.ShapeBufferGeometry(i);r.computeBoundingBox();var a=-.5*(r.boundingBox.max.x-r.boundingBox.min.x);return r.translate(a,0,0),new o.Mesh(r,t)},createText:function(n){var e=this._createTextMesh(n,{message:"nabehide",size:.2});e.position.set(-.7,.2,0),this.scene.add(e);var t=this._createTextMesh(n,{message:"Engineer",size:.06});t.position.set(-1.1,.55,0),this.scene.add(t);var o=this._createTextMesh(n,{message:"Portfolio: https://nabehide.github.io",size:.06});o.position.set(-.61,-.6,0),this.scene.add(o)},render:function(){this.renderer.render(this.scene,this.camera)},animate:function(){requestAnimationFrame(this.animate),this.render()}}}),r=t(14),a=Object(r.a)(i,function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{attrs:{id:"container"}},[e("canvas",{attrs:{id:"canvas"}})])}],!1,null,null,null);a.options.__file="back.vue";e.default=a.exports}}]);